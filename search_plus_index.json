{"./":{"url":"./","title":"简介","keywords":"","body":"My labviewnote introductionThis is winnerzr's labviewnote.It mainly show you some labview skills,which was learned through studying.Welcome to star and fork.My labviewnote introduction This is winnerzr's labviewnote. It mainly show you some labview skills,which was learned through studying. Welcome to star and fork. My hexo blog is Winnerzr. My github link Winnerzr. It is a book powered by GitBook. This book quotes 《 100 cases of LabVIEW 》,the extraction code is y1ij The software used in the experiment is LabVIEW2020 and 2019 Your support is the driving force of my creation. © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"学习规划.html":{"url":"学习规划.html","title":"学习规划","keywords":"","body":"学习路线规划学习路线规划 一、界面及基本控件学习 这是一个比较容易上手的框架，可以先学习下基本控件，再做几个案例就ok啦。 二、结构的使用（多做实例） 结构的确有些冗杂，不过一般比如文本语言所用到的三大结构labview中都有涉及的哦，此外labview中还定义了一些其他的结构方便使用者的使用。用好结构会让你的编程条理清晰且能做很多事情的呢！ 学习时候不妨按照这个顺序来呢，最后做两个案例基本就ok啦。前期觉得生疏不可怕，多做些例程自然而然就会的啦！ 三、数组、数学处理与图表 数组是所有语言中必不可少的元素，labview中为数组单独提供了一个面板。并提供了N多好用的函数控件方便对其进行编程。数组创建的三种方式、接着熟悉下各种对数组操作的函数就没什么大的问题啦。莫忘做几个案例哦！ 簇呢、就是NI觉得线一多面板好乱，这样显得NI好Low，好好的一款语言却这么多线，于是呢便有了簇这个玩意。簇在Labview中也经常见到的，比如最常见的就是我们的错误簇啦，当然，在许多函数里都是使用簇来交流的呢！ 在数组和簇学习完毕后，就开始进入图形控件的使用啦，主要分为二维和三维。Labview的图形可以做出来许多酷酷的界面，大家可以尝试一下哦。 四、文件输入与输出 文件IO一般用于工控的测量记录等方面，主要还是二进制文件的读取，至于文本和电子表格一般则更多用于人机交互的场合。NI主打的TDMS文件格式也是主要需要学习之一。 五、信号处理相关控件的使用 这一章则需要你的信号处理功底，建议亲亲学习下数字信号处理或者信号与系统之类的书籍再往下学习呢。不过问题也不大，很多函数你只要到了会用的级别就行啦，更多的都是举一反三呢。这章如果你需求不高的话一个EXPRESS VI就可以搞定的哦。 六、项目及其软硬联调 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:48 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"labview实例.html":{"url":"labview实例.html","title":"LabVIEW实例","keywords":"","body":"实例一窗口介绍LabVIEW前面板：LabVIEW程序框图：实例二俄罗斯方块游戏界面未优化结果：实例三滤波器程序设计实例四数值型控件的实际应用结果实例五实例六实例七实例八实例九实例十实例十一实例十二实例十三实例十四实例十五实例十六实例十七实例十八实例十九实例二十实例二十一高级实例实例一 基于模板打开一个VI并运行 窗口介绍 LabVIEW前面板： 前面板是VI代码的接口，是用户交互界面，前面板界面上放置了各种图形控件，这些控件主要分为输入控件（Controls）和显示控件（Indicators）两大类。 LabVIEW程序框图： 实例二 俄罗斯方块游戏界面 STEP1：在前面板插入两个空数组和两个布尔控件方形指示，调整两个数组显示为 4*3和10*15 STEP2：插入两个字符串显示控件，分别命名为分数和等级 STEP3：放置一个停止按钮 参考界面： 未优化结果： 实例三 滤波器程序设计 数据流 LabVIEW按照数据流模型运行VI 仅当所有输入数据都准备好时，节点才能执行功能 仅当节点执行完后才能向输出端提供数据 数据采集 用于数据采集的Express VI： DAQ助手Express VI 仪器I/O助手Express VI 仿真信号Express VI 读取测量文件VI 分析Express VI： 幅值和电平测量Express VI 统计Express VI 频谱测量Express VI 单频测量Express VI 滤波器Express VI 显示 执行显示：实现函数功能的Express VI或在VI前面板显示数据的显示控件 显示控件包含波形图表、波形图和XY图 Express VI包含写入测量文件Express VI、创建文本Express VI等 运行 1、放置Express VI至程序框图 2、配置弹出的对话框 3、连线Express VI 4、保存并运行VI 结果 实例四 数值型控件的实际应用 数值型数据在温度采集系统中，可以用于设置温度的上下限值； 当前温度（监控）与最低温度与最高温度的比较，输出当前状态。 温度监控系统中，基于数值型数据应用了程序框图内的比较功能，实现当前状态的输出。 结果 实例五 使用expressVI进行数据的显示（采用数组输出） 实例六 将while用于LabVIEW图片切换器 实例七 task：求信号的频率和功率谱，当频率或者采样率发生变化的时候要求重新进行平均过程 改用移位寄存器 实例八 任务： 监测一天中温室的温度，任意选取50个点作为抽样值 显示当天温度最高值和最低值 将前两个时刻的温度值和当前时刻温度值的平均值作为实时温度，显示温度变化曲线 实例九 交通信号灯 实例十 简易抽奖程序 实例十一 写入文件中的数据 实例十二 录音笔程序 读取录音文件 实例十三 绘制波形 指定初始值和时间间隔 实例十四 多种波形数组和簇数组显示的不同 实例十五 波形图显示多条曲线与波形图表的区别 将波形图表列显示使用数组转置方法进行转换 实时更新指定量数据的波形图表 使用expressVI输出到波形图表 实例十六 XY图显示单条曲线/多条曲线 实例十七 使用顺序结构实现跑马灯 实例十八 任务要求 产生频率可调、波形类型可设置的信号； 以足够的采样率产生和显示波形，并产生采样率可调的波形，以进行比较； 显示波形和信号频谱 实例十九 将温度采集报警系统设置为子VI 在新VI中应用温度采集子VI 实例二十 温度采集系统 实时采集当前温度 温度高于上限或低于下限输出报警信息，中暑或冷冻，同时报警灯亮 将采集数据保存到文本文件中 每隔0.5S界面更新一次 实例二十一 任务要求: 输出正弦波信号，频率0-50M； 采样率10M、50M、100M可选； 检测信号频率 输出采样信号的功率谱，如果频率或采样率发生变化，重新开始平均过程 高级实例 科学计算器 虚拟示波器 Simon游戏设计 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW基础控件.html":{"url":"LabVIEW基础控件.html","title":"LabVIEW基础操作","keywords":"","body":"程序框图工具选板数值型控件基础知识布尔型控件字符串显示控件下拉列表和枚举型控件下拉列表枚举型控件自定义控件的设置帮助即时帮助LabVIEW帮助NI范例查找器修正断开的VI调试技术错误检查和处理程序框图 包含以下对象： 接线端 前面板对象的程序框图外观 在快捷菜单中不选显示为图标，更改接线端的显示类型 节点 程序框图对象，带有输入和/或输出端，并在VI运行时执行运算 函数节点 LabVIEW的基本操作元素 不带有前面板或程序框图，但有连线版 双击函数仅表示选中函数，而双击子VI则直接打开VI 子VI节点 子VI：用于另一VI内部的VI 任何VI均可用作子VI 双击程序框图中的子VI，可查看子VI的前面板和程序框图。 前面板和程序框图右上角显示当前VI的图标 如VI用作子VI，程序框图中显示的即为子VI的图标。 子VI Experss VI 一种特殊的子VI 所需连线数量少，主要通过对话框配置 Experss VI配置可保存为子VI 程序框图对象间通过连线传输数据 不同数据类型的连线颜色、粗细和样式均有差异 断开的连线显示为中间带有红叉的黑色虚线 按下Ctrl + B删除程序框图中所以断开连线 单击右键可以选择整理连线 使用整理程序框图工具，整理已有连线和对象，以增强可读性 1、选中程序框图的一部分 2、单击工具栏部分的整理程序框图按钮 工具选板 工具选板包含以下工具，用于操作或修改前面板和程序框图对象 数值型控件 基础知识 数值型控件可表示不同类型的数值 右键单击输入控件、显示控件或常量，从快捷菜单中选择表示法，改变数值型数据的表示法。 在前面板点击窗口-显示程序框图，从右键菜单中选择表示法，改变数值型数据的表示法。 并可通过右键转换为显示控件、常量 布尔型控件 按钮型 开关型 右键开关型控件可以选择特定的`机械动作`` 点击查找范例搜索机械动作即可查询到相关范例 字符串显示控件 可显示或不可显示的ASCII字符序列 通过快捷菜单更改显示类型： 正常显示、‘/’代码显示、密码显示和十六进制显示 字符串类型显示为粉红色 字符串的数据/控件可以通过程序框图-函数面板-字符串内的函数进行编辑操作和属性修改； 字符串的数据通过字符串面板实现查询、搜索、替换等功能； 字符串的数据/控件可以通过数值/字符串转换函数实现字符串与各种类型数值数据之间的转换； 字符串数据/控件也可以与路径、数组之间进行转换 字符串控件可以通过函数面板的连接字符串以及制表符、回车/换行符将多个字符串数据转换成指定格式的字符串，用于报表的制作 下拉列表和枚举型控件 采集电压信号：要在参数设置界面输入数据采样频率 fs供后续计算，为用户提供1000,2000,300,4000Hz这样整数的选项进行选择，如何实现？ 在许多VI的程序框图中，枚举和下拉列表常数随处可见。 左端带有双向箭头，右端带有下拉箭头的是枚举常数；而仅右端带有下拉箭头的是下拉列表常数。 下拉列表 下拉列表控件以下拉菜单的形式出现，用户可在循环浏览的过程中做出选择 右键单击下拉列表控件，并从快捷菜单中选择编辑项，向控件的下拉列表中添加内容。下拉列表属性对话框的编辑项选项卡中的项顺序决定了控件中的项顺序。 枚举型控件 可以将枚举类型的控件看作下拉列表控件。 枚举型的数据类型是：U 8（256）、U 16 （65536）、U 32（更多），括号内是枚举类型可保留的元素数目。 将枚举型控件连接至条件结构的选择器接线端时，LabVIEW将控件中的字符串与分支条件相比较，而不是控件的数值。 当所需要设置的对象的单位为M或者其他的时候，可以使用下拉列表类型更加直观，只需要更改数据类型和值的大小即可。 自定义控件的设置 右键控件-高级-进入自定义 进入控件编辑模式 重新设计控件外观，导入图片帮助 即时帮助 鼠标悬停于对象上方时，显示LabVIEW对象的基本信息。 点击帮助》》显示即时帮助、按下Ctrl + h或点击工具栏上的显示即时帮助窗口按钮。 LabVIEW帮助 多数选板、菜单、工具、VI和函数的详细介绍及LabVEIW使用说明都在LabVIEW的帮助中。 打开LabVIEW帮助： 点击帮助》 搜索LabVIEW帮助。 使用即时帮助窗口的详细帮助信息链接或按钮。 右键单击对象，选择快捷菜单中的帮助项。 NI范例查找器 修正断开的VI 常见问题： 断线 将布尔型输入控件与字符串型显示控件相连。 将数值型输入控件与数值型数值型输入控件相连。 必须连接的程序框图接线端断开。 子VI断开或将子VI图标放置在VI程序框图上之后，对连线版进行了编辑。 调试技术 VI未断开，但产生某些未预期数据或事件 是否存在未连线或隐藏的子VI？ 是否使用了不正确的默认数据？ 是否传递了未定义数据？ 是否使用了正确的数值表示法？ 节点执行顺序是否正确？ 错误检查和处理 虽然开发人员在创建VI时，努力确保VI的完善性。但用户仍可能碰到不可预期的问题。 如果没有错误检查机制，仅能确定VI不能正常工作。 错误检查能够指出错误发生的原因及位置 手动错误处理 自动错误处理 LabVIEW使用下列方式自动处理VI运行中的已知错误： 挂起执行 高亮显示出错的子VI或函数 显示错误对话框 点击文件》VI属性，在类别下拉菜单中选择执行，可禁用指定VI的自动错误处理功能 如果要禁用子VI或函数的自动错误处理功能，可将其错误输出簇与另一子VI或函数的错误输入簇连线，或连接错误输出显示控件 使用LabVIEW错误处理VI、函数和参数管理错误 使用错误簇输入控件和显示控件创建子VI错误输入和输出 错误输入和错误输出簇包含下列信息 状态 代码 源 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW图表.html":{"url":"LabVIEW图表.html","title":"LabVIEW图表","keywords":"","body":"波形图波形图表XY图波形图 波形图：是一个专门用来显示一个或多个数据曲线的数值类型的指示器控件 接收的数据类型：数组、簇、波形数据类型 包含信息： 起始时间 时间间隔 波形的数据 波形图表 波形图表是显示一条或多条数据曲线的特殊数值显示控件，一般用于显示恒定速率采集到的数据 显示一条或多条曲线 波形图表一般用于显示--恒定速率采集到的的数据 波形图是同时将所有要显示的点显示出来，接收的数据是数组 波形图表会保留来源于此前更新的历史数据，可以设置数据缓存区的大小，波形图不会保留历史数据 右键单击图表，从快捷菜单选择高级》刷新模式 默认刷新模式为带状图表 示波器图表和扫描图表显示曲线速度明显快于带状图表 XY图 不规则间隔采样 每隔X值对应多个Y值 使用坐标确定每个数据点 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW结构函数.html":{"url":"LabVIEW结构函数.html","title":"LabVIEW结构函数","keywords":"","body":"顺序结构条件结构事件结构事件结构的应用移位寄存器移位寄存器的应用移位寄存器的初始化问题使用移位寄存器判断值是否更改属性节点属性节点的应用调用节点的创建变量的应用并行变量类型：使用局部变量在单个VI中传递数据布尔型控件局部变量的创建顺序结构 平铺式顺序结构 执行顺序：从左至右 层叠式顺序结构 通过顺序局部变量传递数据 条件结构 类似于C语言中的if(){}else()和switch{case}语句 包括两个及以上子程序框图或分支 每次仅执行一个条件分支 可为条件结构指定默认的条件分支 如已为1、2、3指定条件分支，输入数据4时，条件结构将执行默认条件分支 右键单击条件结构边框添加、幅值、删除、重排及选择默认分支 输入和输出隧道 可创建多个输入/输出隧道 输入数据可供全部条件分支使用 必须为每个条件分支定义各自的输出隧道 事件结构 用户界面（静态）事件范例 单击鼠标按键 单击键盘按键 修改数值控件的值 事件选择器标签- 识别当前查看的事件分支 超时- 等待某个事件发生的事件：默认值为1，即永不超时 事件数据节点识别事件发生时LabVIEW提供的数据；与按名称接触捆绑函数类似 事件过滤节点识别在事件数据节点中，事件分支可修改的部分数据 通知事件 用户操作已经发生 LabVIEW已处理了事件 仅用于事件数据节点 过滤事件 用户操作已经发生 LabVIEW尚未处理事件 允许用户覆盖事件的默认动作 可用于事件过滤节点和事件数据节点 通常用于While循环 事件结构的应用 阿拉丁神灯 点击阿拉丁神灯，出现阿拉丁，询问主人有何吩咐 没有任何吩咐，点击退下，阿拉丁隐身 点击停止按钮，程序停止 移位寄存器 移位寄存器的应用 使用循环结构编程时，经常需要访问前一次循环产生的数据 移位寄存器将前一循环产生的数据传递至下一循环 右键单击循环边框，从快捷菜单选择添加移位寄存器 右侧的移位寄存器存储每一次循环结束后的数据 左侧的移位寄存器为下一循环提供所存储的数据 移位寄存器的初始化问题 使用移位寄存器判断值是否更改 在while循环中利用移位寄存器判断值是否有改变 属性节点 属性节点用于访问对象的属性 在某些应用中可能需要通过编程改变前面板对象外观，以响应特定输入 当用户输入无效密码时，红色指示灯开始闪烁 当数值值高于指定值时，线条显示为红色而不是绿色 通过编程属性节点可完成上述改动 属性节点按照由上而下的顺序执行 如某接线端出错，节点将在此处中止执行。返回错误消息并不再继续执行后续接线端。 如要更改默认设置，可单击右键，选择忽略节点内部错误 - 严格属性节点：右键控件选择创建引用，进行连接。 控件的属性可以使用隐式连接的方法直接访问，也可以使用引用来访问 VI和应用程序本身的属性必须通过引用接入相应节点的方式访问 显示内存中所有已经打开的VI的文件名，并且返回这些文件在磁盘上的路径 属性节点的应用 调用节点的创建 调用节点 调用节点可用于执行引用的项的操作和方法 VI 输入控件 大部分方法均带有相关参数 使用VI服务器引用，关联调用节点和当前VI 创建一个VI方法 放置一个VI服务器引用函数，选择本VI 单击右键，从快捷菜单中选择创建》》类的方法，并选择所需的方法 要创建隐式链接调用节点，右键单击控件，从快捷菜单选择创建》》调用节点并选择方法 控件常见的方法为“重新初始化为默认值”方法 变量的应用 并行 从文件中读取停止按钮的值 每个循环独立访问文件 但读写文件会占用大量的处理器时间 通过连线无法在并行循环间传递数据 变量类型： 局部变量：将数据存储在前面板输入控件和显示控件中（单个VI传递数据） 全局变量：将数据存储在多个VI可访问的特殊数据库中 功能全局变量：将数据存储在while循环移位寄存器中 共享变量：在通过网络连接的分布式任务间传递数据 使用局部变量在单个VI中传递数据 作用：使得两个循环同事停止 布尔型控件 具有关联局部变量的布尔控件必须使用开关机械动作 布尔触发动作与局部变量不兼容 局部变量的创建 点击控件右键创建局部变量 点击之后所创建的局部变量会出现一系列的可以创建局部变量的控件 对于布尔控件：需要选择对应的机械动作，才能创建局部变量不出错 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW数组函数.html":{"url":"LabVIEW数组函数.html","title":"LabVIEW数组函数","keywords":"","body":"数组的创建和应用数组创建数组由元素和维度组成数组初始化二维数组创建数组函数的应用数组的创建和应用 数组创建 处理一系列相似的数据和执行重复计算操作时，可考虑使用数组 数组将相同类型的数据元素归为一组 在前面板放置一个数据的外框 拖放一个数据对象或元素至外框内 数组由元素和维度组成 元素：组成数组的数据 维度：数组的长度、高度、深度 数组可以使一维的或多维的 内存允许的情况下，每一维度可有多达（2^31 -1）个元素 数组初始化 方法 直接在前面板输入元素进行初始化 for循环索引输出 数组的初始化函数 注意： ​ 未初始化的数组具有维数，但不包含任何元素 如将数组连接至for循环或while循环，启用隧道的自动索引功能可有序对应循环与数组中元素 如已使用自动索引功能，隧道图表将由方形变为上图所示的图标 如有多个隧道启用自动索引，或对循环总线接线端进行连线，实际的循环次数将取其中的较小值 如已启用数组输出隧道的自动索引功能，输出数组从每次循环接收到一个元素 自动索引输出数组在大小上等于循环次数 二维数组创建 定位一个元素需要行索引和列索引，上述索引均以零为起始值 如要在前面板创建一个多维数组，右键单击索引显示边框，从快捷菜单选择添加维度 或直接拖拽索引显示边框至所需维数 将for循环的结果输出为二维数组，内部的for循环控制列数，外部的for循环控制行数。 数组函数的应用 同时输出正弦波、方波、三角波信号 将其显示在一个波形图上 将波形信号保存到测量文件中 要求设置通道名称分别为正弦波、方波、三角波 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW循环函数.html":{"url":"LabVIEW循环函数.html","title":"LabVIEW循环函数","keywords":"","body":"while循环的应用隧道应用（修改综合应用1）For循环的创建和配置创建方法For循环和While循环的比较时间函数while循环的应用 为了进行连续的数据采集或信号输出 文本编程语言：While循环 While (1){ code } LabVIEW： 计数接线端：返回已执行循环的次数，从0开始计数 条件接线端：定义循环结束条件 红色表示真的时候循环停止 绿色表示真的时候循环继续 隧道 隧道用于结构间的数据输入和输出 隧道根据接入的数据类型更改颜色 隧道向循环传送数据时，需所以数据均到达隧道后，循环才能执行 应用（修改综合应用1） 可随时进行数据采集，频率显示 For循环的创建和配置 采集温度信号 连续采集------->While循环 采集有限个点---->For循环 创建方法 右键单击While循环边框，从快捷菜单选择替换为For循环，可以将现有While循环替换为For循环 N：总数接线端指定for循环内部代码执行的次数 For循环条件接线端包括：靠近总数接线端的红色符号右下方的条件接线端 需要显示右下角红点，需要右键for循环打开条件接线端 For循环的循环次数值必须被指定为非负整数 如连接双精度浮点数值至总接线端，LabVIEW将把较长数值转换为32位有符号整数 避免强制转换，以增强程序性能 选择匹配的数据类型 通过编程，将数值转换为匹配的数据类型 For循环和While循环的比较 For循环： While循环： 如未添加条件接线端，For循环按照设定的次数执行 仅当条件接线端收到符合条件的值时才停止执行 可执行0次 至少执行一次 隧道自动输出一个数组 隧道自动输出最后一次执行的值 时间函数 已用时间函数：设置循环到指定时间后停止 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW动态数据类型.html":{"url":"LabVIEW动态数据类型.html","title":"LabVIEW动态数据类型","keywords":"","body":"动态数据类型从动态数据类型转换转换至动态数据类型获取和设置动态数据的属性动态数据类型 在LabVIEW中，动态数据类型表示为深蓝色 保存由Express VI产生或采集的信息，包含与信号相关的数据，以及信号相关的属性信息。例如，信号的名称、采集的日期和时间，等等 非Express VI无法接受动态数据类型 如果使用内置VI或函数分析和处理动态数据类型，必须先进行数据类型转换 如已连线，数值、波形和布尔型数据显示控件或输入端可自动转换动态数据 从动态数据类型转换 在程序框图上放置\"从动态数据转换\" Express VI时。 出现配置对话框，配置对话框显示的选项用于指定如何格式化\"从动态数据转换\"Express VI返回的数据类型。 转换至动态数据类型 在程序框图上放置\"转换至动态数据\"Express VI 在出现的配置对话框中，指定待转换动态数据的转换类型，然后单击确定按钮 获取和设置动态数据的属性 使用获取动态数据属性Express VI获取动态数据的属性。在程序框图上放置“获取动态数据属性”Express VI时，将出现一个配置对话框。使用该对话框获取连接至Express VI的动态数据中信号的属性。 使用设置动态数据属性Express VI设置动态数据的属性，例如，信号名、时间标识、时间模式、等等。在程序框图上设置“设置动态数据类型属性”Express VI时，将出现一个配置对话框、使用该对话框修改或设置连接至Express VI的动态数据中的信号的属性。 使用Express VI，模拟信号输入，在波形图上显示波形，获取采样数据、采样时间和信号名称 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW生产者消费者模式.html":{"url":"LabVIEW生产者消费者模式.html","title":"LabVIEW生产者消费者模式","keywords":"","body":"生产者消费者模式多循环结构队列生产者消费者模式应用生产者消费者模式 多循环结构 基于状态机的缺点：任何时刻只能有一个状态在运行 LABVIEW本身就是一种多线程的程序设计语言，可以再加一个循环或者另外开一个程序独立运行。但是这样也会带来一些新的问题，比如： 两个循环（程序）之间如何交换和共享数据。 两个循环（程序）都有着独立的错误处理系统，他们之间是如何协调的 两个循环如何分工呢？应该以哪种方式对状态进行分类以将不同的状态放置在不同的循环（程序）中？ 一个程序如何控制另一个程序的运行和停止 队列 队列可存储多个数据 默认情况下，队列以FIFO（先进先出）方式执行 如需处理排列为队列的数据，请使用队列 队列操作函数可为在程序框图的不同部分或其它VI间通信的数据创建队列。 生产者消费者模式应用 暂无 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW创建和发布应用程序.html":{"url":"LabVIEW创建和发布应用程序.html","title":"LabVIEW创建和发布应用程序","keywords":"","body":"创建和发布应用程序程序生成规范创建和发布应用程序 程序生成规范 使用程序生成规范，创建： 独立应用程序 安装程序 发布源代码 zip文件 共享库 .NET互操作程序集 Web服务 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW簇.html":{"url":"LabVIEW簇.html","title":"LabVIEW簇","keywords":"","body":"簇函数的应用波形簇簇函数的应用 保存多个不同类型的数据。 波形簇 一种特殊的簇 簇元素： t0 时间戳 dt Y数据的间隔时间 Y 随时间变化的一组数据 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW子VI.html":{"url":"LabVIEW子VI.html","title":"LabVIEW子VI","keywords":"","body":"子VI的使用图标和连线板较好的VI图标创建图标设置连线板标准使用子VI子VI的使用 LabVIEW中模块称为子VI 模块化就是将程序分为若干区块。这样，对程序某个模块的修改就不会影响到其他模块 在VI内部被调用的VI称为子VI 子VI相当于文本编程语言中的子程序 前面板和程序框图右上角均显示VI图标 图标为程序框图中VI的图形化表示 图标和连线板 创建VI后，通过设置图标和连续板可将VI用作子VI 图标和连线板相当于文本编程语言中的函数原型 每个VI前面板和程序框图的右上角均有一个图标 图标是VI的图形化表示 VI用作子VI时，程序框图上将显示该VI的图标 较好的VI图标 一个较好的VI图标应具有下列特性 通过以下参数表述VI功能： 相关图形 描述性文本 创建图标 右键单击前面板或程序框图右上角的图标，从快捷菜单选择编辑图标或双击改图标，可执行图标自定义操作 用户也可将系统中的任意图片拖拽至该图标上 使用编辑工具手动修改图标 点击符号选项卡，显示所有可用作图标的图形符号 点击工具》》同步ni.com图标库更新图标 使用图标文本选项卡，指定图标中的显示文本 点击模板选项卡，显示可用作图标背景的模板 设置连线板 右键单击前面板右上角图标，从快捷菜单选择显示连线板 连线板上的每个单元格代表一个接线端 使用各接线端分配输入和输出 右键单击连线板，从快捷菜单选择模式，可选择所需连线模式 标准 以此连线板布局为标准 顶部接线端通常预留为引用接线端，例如文件引用 底部接线端通常预留为错误簇 使用子VI 如要放置一个子VI至程序框图： 在函数选板选择VI 选择要用作子VI的VI 双击VI，将其放置在程序框图上 如要放置一个已打开的VI至另一个打开的VI的程序框图： 单击要用作子VI的VI的图标 拖拽此图标至另一VI的程序框图 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW状态机.html":{"url":"LabVIEW状态机.html","title":"LabVIEW状态机","keywords":"","body":"状态机顺序编程基本结构默认转移状态转移条件结构转移转换数组转移示例状态机 顺序编程 使用错误簇强行指定程序执行顺序 如需强行指定执行顺序，请使用顺序结构，由多个帧组成的结构，按照帧的先后顺序执行 尽管顺序结构或顺序连接子VI可完成任务，但对于下列情况并非理想选择： 需改变执行顺序时 需重复执行顺序结构中某一帧时 需仅在满足一定条件时才执行某几帧时 需立即停止程序，而不是等待最后一帧执行完毕才结束程序时 基本结构 状态机由状态的集合以及对应状态切换的转换函数构成 每个状态可触发一个或多个状态或结束进程处理 默认转移 状态转移 条件结构转移 转换数组转移 示例 © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"LabVIEW例子.html":{"url":"LabVIEW例子.html","title":"LabVIEWExamples","keywords":"","body":"Example One：Example One： Name：save.vi Function： © by winnerzr all right reserved，powered by Gitbook该文档修订时间： 2021-02-23 16:03:32 new Valine({el: \"#vcomments\",appId: 'Pmai2zSyIldhmWIcUD2yFIcp-gzGzoHsz',appKey: 'TuPQ3Y38BG6lBdwDvl2cmMmb',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "}}